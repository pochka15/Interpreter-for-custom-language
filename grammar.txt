start: (function_declaration (NEWLINE function_declaration)*)?

function_declaration: NAME "(" function_parameters ")" function_return_type? "{" statements_block "}"

function_parameters: (function_parameter ("," function_parameter)*)?

function_return_type: NAME

function_parameter: NAME type

type: "(" type ")" | simple_type ("." simple_type)*

// Inline
simple_type: NAME

// Inline
statement: assignment | for_statement | while_statement | expression | jump_statement

variable_declaration: (VAR | CONST) NAME type

statements_block: (statement (NEWLINE statement+)*)?

assignment: directly_assignable_expression ASSIGNMENT_OPERATOR expression
  | assignable_expression ASSIGNMENT_AND_OPERATOR expression

// Inline
assignable_expression: prefix_unary_expression 
  | "(" prefix_unary_expression ")"

// Inline
directly_assignable_expression : postfix_unary_expression assignable_suffix?
  | variable_declaration
  | "(" directly_assignable_expression ")"

// Inline
assignable_suffix: indexing_suffix
  | navigation_suffix

for_statement: FOR NAME IN expression "{" statements_block "}"

while_statement: WHILE expression "{" statements_block "}"

// Inline
expression: disjunction

// Inline
disjunction: conjunction (OR conjunction)*

// Inline
conjunction: equality (AND equality)*

// Inline
equality: comparison (EQUALITY_OPERATOR comparison)*

// Inline
comparison: additive_expression (COMPARISON_OPERATOR additive_expression)*

function_call_arguments: (expression ("," expression)*)?

// Inline
additive_expression: multiplicative_expression (ADDITIVE_OPERATOR multiplicative_expression)*

// Inline
multiplicative_expression: prefix_unary_expression (MULTIPLICATIVE_OPERATOR prefix_unary_expression)*

// Inline
prefix_unary_expression: prefix_operator* postfix_unary_expression

prefix_operator: NEGATION | ADDITIVE_OPERATOR

// Inline
postfix_unary_expression: primary_expression postfix_unary_suffix*

// Inline
postfix_unary_suffix: call_suffix | indexing_suffix | navigation_suffix

call_suffix: "(" function_call_arguments ")"

indexing_suffix: "[" expression "]"

navigation_suffix: "." NAME

// Inline
primary_expression: "(" expression ")"
  | identifier
  | simple_literal
  | collection_literal
  | if_expression

// Inline
identifier: NAME

collection_literal: "[" expression ("," expression)* "]" | "[" "]"

jump_statement: RETURN expression?
  | BREAK

if_expression: "if" expression "{" statements_block "}"
  | "if" expression "{" statements_block "}" ELSE "{" statements_block "}"
  | "if" expression "{" statements_block "}" ELSE if_expression

// Inline
simple_literal: STRING | BOOLEAN | DEC_NUMBER | FLOAT_NUMBER

DEC_NUMBER: /0|[1-9][\d_]*/i
COMMENT: /#[^\r\n]*/
STRING: LEXER_IMP

//LETTER: /[a-zA-Z]/
WS: /[ \t\f]/+
NEWLINE: /[\r\n]/

// Non-terminals
EQUALITY_OPERATOR: "!=" | "=="
ASSIGNMENT_OPERATOR: "="
BOOLEAN: "true" | "false"
FLOAT_NUMBER: /((\d+\.[\d_]*|\.[\d_]+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
COMPARISON_OPERATOR: "<" | ">" | "<=" | ">="
ADDITIVE_OPERATOR: "+" | "-"
NEGATION: "!"
MULTIPLICATIVE_OPERATOR: "*" | "/" | "%"
ASSIGNMENT_AND_OPERATOR: "+=" | "-=" | "*=" | "/=" | "%="
RELATIVE_LOCATION: /\.+/
RETURN: "ret"
BREAK: "break"
ELSE: "else"
CONST: "c"
VAR: "v"
FOR: "for"
IN: "in"
WHILE: "while"
OR: "or"
AND: "and"
NAME: /(?!(or|and|for|while|true|false|ret|break|else|in|v|c)\b)[a-zA-Z_][a-zA-Z_0-9]*/