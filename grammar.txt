start: function_declaration*

function_declaration: NAME "(" function_parameters ")" function_return_type "{" statements_block "}"

function_parameters: (function_parameter ("," function_parameter)*)?

// Inline
function_return_type: NAME

function_parameter: NAME type

type: NAME ("." NAME)*

// Inline
statement: assignment | for_statement | while_statement | expression | jump_statement

variable_declaration: (VAR | CONST) NAME type

statements_block: statement*

assignment: variable_declaration ASSIGNMENT_OPERATOR expression
  | prefix_unary_expression ASSIGNMENT_AND_OPERATOR expression

// Inline
assignable_suffix: indexing_suffix
  | navigation_suffix

for_statement: FOR NAME IN expression "{" statements_block "}"

while_statement: WHILE expression "{" statements_block "}"

// Inline
expression: disjunction

// Optional inline
disjunction: conjunction (OR conjunction)*

// Optional inline
conjunction: equality (AND equality)*

// Optional inline
equality: comparison (EQUALITY_OPERATOR comparison)*

// Optional inline
comparison: additive_expression (COMPARISON_OPERATOR additive_expression)*

// Optional inline
additive_expression: multiplicative_expression (ADDITIVE_OPERATOR multiplicative_expression)*

// Optional inline
multiplicative_expression: prefix_unary_expression (MULTIPLICATIVE_OPERATOR prefix_unary_expression)*

// Optional inline
prefix_unary_expression: prefix_operator? postfix_unary_expression

// Inline
prefix_operator: NEGATION | ADDITIVE_OPERATOR

// Optional inline
postfix_unary_expression: primary_expression postfix_unary_suffix*

// Inline
postfix_unary_suffix: call_suffix | indexing_suffix | navigation_suffix

call_suffix: "(" function_call_arguments ")"

function_call_arguments: (expression ("," expression)*)?

indexing_suffix: "[" expression "]"

navigation_suffix: "." NAME

// Inline
primary_expression: "(" expression ")"
  | identifier
  | simple_literal
  | collection_literal
  | if_expression

// Inline
identifier: NAME

collection_literal: "[" expression ("," expression)* "]" | "[" "]"

// Inline
jump_statement: return_statement
  | BREAK

return_statement: RETURN expression?

if_expression: IF expression "{" statements_block "}"
  | IF expression "{" statements_block "}" elseif_expression* else_expression?
  
elseif_expression: ELIF expression "{" statements_block "}"

else_expression: ELSE "{" statements_block "}"

// Inline
simple_literal: STRING | BOOLEAN | DEC_NUMBER | FLOAT_NUMBER

// Don't ignore
DEC_NUMBER: /0|[1-9][\d_]*/i
STRING: LEXER_IMP
EQUALITY_OPERATOR: "!=" | "=="
BOOLEAN: "true" | "false"
FLOAT_NUMBER: /((\d+\.[\d_]*|\.[\d_]+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
COMPARISON_OPERATOR: "<" | ">" | "<=" | ">="
ADDITIVE_OPERATOR: "+" | "-"
NEGATION: "!"
MULTIPLICATIVE_OPERATOR: "*" | "/" | "%"
ASSIGNMENT_AND_OPERATOR: "+=" | "-=" | "*=" | "/=" | "%="
CONST: "c"
VAR: "v"
NAME: /(?!(if|elif|or|and|for|while|true|false|ret|break|else|in|v|c)\b)[a-zA-Z_][a-zA-Z_0-9]*/

COMMENT: /#[^\r\n]*/

//LETTER: /[a-zA-Z]/
WS: /[ \t\f]/+
NEWLINE: /[\r\n]/

// Non-terminals
ASSIGNMENT_OPERATOR: "="
RETURN: "ret"
BREAK: "break"
ELSE: "else"
ELIF: "elif"
FOR: "for"
IN: "in"
WHILE: "while"
OR: "or"
AND: "and"
IF: "if"