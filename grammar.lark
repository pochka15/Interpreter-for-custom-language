_comma_separated{arg}: arg ("," arg)*

_parenthesized{arg}: "(" arg ")"

start: import_statement* ((statement | declaration) (_NL (statement | declaration))*)?

?import_statement: import_without_from | import_with_from

import_without_from: _IMPORT as_name ("," as_name)*

import_with_from: _FROM from_path _IMPORT import_targets

from_path: RELATIVE_LOCATION? NAME ((".") NAME)*

?import_targets: as_name ("," as_name)* | ALL_TARGETS

?as_name: NAME ("as" NAME)?

?identifier: NAME

function_declaration: NAME type_arguments? function_parameters VISIBILITY_MODIFIER? OVERRIDDEN? FUNCTION_RETURN_TYPE? "{" statements_block "}"

abstract_function_declaration: NAME type_arguments? function_parameters VISIBILITY_MODIFIER? ABSTRACT? FUNCTION_RETURN_TYPE

function_parameters: "(" _comma_separated{function_parameter}? ")"

type_arguments: "<" _comma_separated{type} ">"

function_parameter: NAME type val_or_var?

type: _parenthesized{type} | simple_user_type ("." simple_user_type)*

?simple_user_type: NAME type_arguments?

?statement: assignment | for_statement | while_statement | expression | jump_statement

?declaration: interface_declaration | class_declaration | function_declaration

interface_declaration: NAME type_arguments? parents? "interface" "{" interface_body? "}"

parents: _comma_separated{NAME}

interface_body: interface_function_declaration (_NL interface_function_declaration)*

?interface_function_declaration: function_declaration | function_declaration_without_body

function_declaration_without_body: NAME type_arguments? function_parameters FUNCTION_RETURN_TYPE

property_declaration: NAME type VISIBILITY_MODIFIER? val_or_var?

property_assignment: NAME type? VISIBILITY_MODIFIER? val_or_var? ASSIGNMENT_OPERATOR expression

abstract_property_declaration: NAME type VISIBILITY_MODIFIER? ABSTRACT val_or_var?

variable_declaration: NAME type val_or_var

?val_or_var: VAL | VAR

?class_declaration: abstract_class_declaration | non_abstract_class_declaration

abstract_class_declaration: NAME type_arguments? parents? ABSTRACT "class" "{" abstract_class_body "}"

non_abstract_class_declaration: NAME type_arguments? parents? "class" "{" non_abstract_class_body "}"

abstract_class_body: (abstract_class_member_declaration (_NL abstract_class_member_declaration)*)?

non_abstract_class_body: (non_abstract_class_member_declaration (_NL non_abstract_class_member_declaration)*)?

abstract_class_member_declaration: function_declaration | property_assignment | abstract_property_declaration | abstract_function_declaration

non_abstract_class_member_declaration: function_declaration | property_declaration | property_assignment

statements_block: (statement (_NL statement+)*)?

assignment: directly_assignable_expression ASSIGNMENT_OPERATOR expression
  | assignable_expression ASSIGNMENT_AND_OPERATOR expression

?assignable_expression: prefix_unary_expression | _parenthesized{prefix_unary_expression}

?directly_assignable_expression : postfix_unary_expression assignable_suffix?
  | variable_declaration
  | _parenthesized{directly_assignable_expression}

?assignable_suffix: type_arguments
  | indexing_suffix
  | navigation_suffix

for_statement: label? "for" NAME "in" expression "{" statements_block "}"

while_statement: label? "while" expression "{" statements_block "}"

label: NAME "@"

?expression: disjunction

?disjunction: conjunction ("||" conjunction)*

?conjunction: equality ("&&" equality)*

?equality: comparison (EQUALITY_OPERATOR comparison)*

?comparison: additive_expression (COMPARISON_OPERATOR additive_expression)*

function_call_arguments: (expression ("," expression)*)?

?additive_expression: multiplicative_expression (ADDITIVE_OPERATOR multiplicative_expression)*

?multiplicative_expression: prefix_unary_expression (MULTIPLICATIVE_OPERATOR prefix_unary_expression)*

?prefix_unary_expression: PREFIX_OPERATOR* postfix_unary_expression

?postfix_unary_expression: primary_expression postfix_unary_suffix*

?postfix_unary_suffix: type_arguments | call_suffix | indexing_suffix | navigation_suffix

call_suffix: type_arguments? "(" function_call_arguments ")"

indexing_suffix: "[" expression "]"

navigation_suffix: "." NAME

?primary_expression: _parenthesized{expression}
  | identifier
  | simple_literal
  | collection_literal
  | if_expression

collection_literal: "[" expression ("," expression)* "]" | "[" "]"


jump_statement: RETURN expression?
  | CONTINUE
  | continue_at
  | BREAK
  | break_at

continue_at: _CONTINUE_AT NAME

break_at: _BREAK_AT NAME

if_expression: "if" expression "{" statements_block "}"
  | "if" expression "{" statements_block "}" ELSE "{" statements_block "}"
  | "if" expression "{" statements_block "}" ELSE if_expression

?simple_literal: STRING | BOOLEAN | DEC_NUMBER | FLOAT_NUMBER

%import python.DEC_NUMBER
%import python.COMMENT
%import python.STRING
%import common.LETTER
%import common.DIGIT
%import common.WS
%import common.NEWLINE -> _NL

%ignore WS
%ignore COMMENT

// Non-terminals
EQUALITY_OPERATOR: "!=" | "=="
ASSIGNMENT_OPERATOR: "="
BOOLEAN: "true" | "false"
FLOAT_NUMBER: /((\d+\.[\d_]*|\.[\d_]+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
VISIBILITY_MODIFIER: "private" | "public"
FUNCTION_RETURN_TYPE: NAME
COMPARISON_OPERATOR:  "<" | ">" | "<=" | ">="
ADDITIVE_OPERATOR: "+" | "-"
PREFIX_OPERATOR: ADDITIVE_OPERATOR | "!"
MULTIPLICATIVE_OPERATOR: "*" | "/" | "%"
_IMPORT: "import"
ASSIGNMENT_AND_OPERATOR: "+=" | "-=" | "*=" | "/=" | "%="
_FROM: "from"
RELATIVE_LOCATION: /\.+/
ALL_TARGETS: "*"
VAL: "val"
VAR: "var"
ABSTRACT: "abstract"
OVERRIDDEN: "overridden"
RETURN: "return"
CONTINUE: "continue"
BREAK: "break"
_CONTINUE_AT: "continue@"
_BREAK_AT: "break@"
ELSE: "else"
NAME: /(?!(private|public|true|false|import|from|val|var|abstract|overridden|return|continue|break|else|class|interface|while|for|this|in)\b)[a-zA-Z_][a-zA-Z_0-9]*/